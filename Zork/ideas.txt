1. hacer un bool en "Item" que determine si puede contener Items dentro o no (p.e. una espada no puede, un saco s√≠)
2. implementar algo en "Exit" que represente si necesita una llave o no
3. que el arma brille cuando el enemigo est√© en una habitaci√≥n connexa a la que est√°s. que brille mucho cuando est√© en la misma.
4. habr√° q implementar algo en exit q indique si se puede pasar o no (la puerta est√° cerrada, no est√° la l√°mpara encendida...)
5. si est√°s en library/cellar/studio/gallery, la oscuridad te come (hay un bicho en el zork q te mata si est√°s a oscuras creo)
6. look repite todas las descripciones
7. Aun le tengo que encontrar un sentido al Name del Exit, yo quitar√≠a direction la verdad. Al fin y al cabo, el Name de una Entity sirve para los comandos.
8. algo en item que determine si se puede agarrar, romper, mover...

IMPORTANTE: cambiar atributos a Private y hacer Getters y Setters. (al final)

"contains" de Player == inventario. Es decir, solo puede contener Item (?)

DUDA: update pura o no?


La funcion Look() tiene mas sentido definirla en cada entidad y llamarla por cada entidad que existe. Por que? Porque yo puedo meter un container en un container, y en vez de hacer un bucle feo simplemente llamo al Look() de cada entidad.

Sobre el contains:

- cuando inicializo el mundo, cada entidad tiene su contain. depende del tipo de entidad, contain es una cosa u otra.
p.e. el contains de player es el inventario, el de room es las exits, items y creatures que hay. al final se acaba creando
una jerarqu√≠a de entidades, como un arbol.



							Room
							  |
							  |
							  |
			-------------------------------------------------------------------------
			|									|
			|									|
		   Saco marr√≥n								     Player
			|									|
			|								   ------------
		     Espada								   |	      |
											L√°mpara     Llave


Ahora imag√≠nate que abro el saco y saco la espada. Espada ser√≠a una entidad m√°s en Room, al mismo nivel que Saco marr√≥n y Player. Es decir, quitar√≠amos la espada del vector de entidades de saco marr√≥n y la meter√≠amos en Room. O imag√≠nate que dropeo la l√°mpara, pues igual, la quitariamos del vector de entidades de player y la meter√≠amos en el de Room. Tendr√≠amos que hacer un m√©todo (no s√© si en World o Entity) que actualice el contain al que pertenece cada objeto cuando interactuamos con √©l. Para esto habr√≠a que indicar el Parent de cada entidad (el padre en el √°rbol), para saber donde ir. Por ejemplo, dropeo la l√°mpara, decimos "Cu√°l es el parent de L√°mpara?" Player. Vale, "cu√°l es el parent de Player?" Room. Vale, pues si dropeo la l√°mpara, pasar√° a formar parte del Parent de su Parent, es decir, de Room. Otra cosa a tener en cuenta es que cada instancia por ejemplo de Exit JAM√ÅS pasar√° a formar parte de otro vector de entidades, siempre se quedar√° en el de Room, ya que no podemos modificar la exit, es una puerta sabes? Claro, pues esa es la funci√≥n Update, acabo de caer no? Podemos convertirla en pura.

Hacemos un cambio: quitamos location de creature, y source de exit, ya que por definicion es lo mismo que Parent.

O por ejemplo, si queremos hacer un NPC que cambie de Room segun el turno, se tendr√° que cambiar el parent a otra Room.

Al final de cada "turno", haces Update y asignas (seg√∫n qu√© entidades) las entidades a la lista contain de sus parents.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DESCRIPCIONES DE EXITS (made in ChatGPT que no soy tan ingenioso todav√≠a)

üìç Entry ‚Üí North ‚Üí Kitchen
The room feels still, but you notice a faint draft coming from the north. The scent of aged spices and something long forgotten beckons you to the doorway ahead.

üìç Kitchen ‚Üí East ‚Üí Dining Room
To the east, a darkened passageway stretches forward. The heavy air grows denser as you move, and the stillness is palpable, inviting you to step into the unknown.

üìç Dining Room ‚Üí East ‚Üí Library (üîí Requires a key)
To the east, a tall and imposing doorway stands. Its frame blends almost seamlessly with the shadows. There's a strange resistance here, as if the passage doesn‚Äôt want to be disturbed.

(Una vez desbloqueada)
The door creaks open slightly as the resistance fades. A dark, quiet room waits beyond, its silence almost deafening.

üìç Library ‚Üí South ‚Üí Cellar (üîç Hidden passage)
"To the south, a massive bookshelf stands against the wall, filled with dusty tomes."

(Despu√©s de abrirlo)
"With a firm push, the bookshelf resists at first, then suddenly shifts with a deep grinding noise. Dust swirls in the air as it slowly swings open, revealing a dark passage leading downward. A damp, musty scent drifts up from below, hinting at the hidden depths of the cellar."

üìç Cellar ‚Üí West ‚Üí Studio
To the west, a narrow corridor leads into an even deeper silence. The dampness in the air grows heavier, and the oppressive quiet swallows your every step.

üìç Cellar ‚Üí South ‚Üí Gallery
In the southern corner, the darkness seems to thicken. There is something here, something you can feel but not quite see, drawing you into the shadows beyond.

üìç Cellar ‚Üí East ‚Üí Garden (üîí Enemy drops key)
"To the east, a narrow staircase leads upward, vanishing into the darkness above. At the top, a heavy wooden door blocks the way, its surface scarred by time and neglect. You try the handle‚Äîit doesn‚Äôt budge. A sturdy lock keeps it sealed, its key nowhere in sight. As you step back, a chill runs down your spine‚Äîsomething lurks nearby, watching, waiting."

(Una vez conseguida la llave y desbloqueado)
With the key in hand, the barrier gives way, creaking as it opens. A fresh, earthy scent emerges from beyond, cool and inviting.

üìç Garden ‚Üí East ‚Üí Final
"To the east, a faint light glimmers through the shadows, and the air feels charged with anticipation. Before you, a weathered door stands sealed with a heavy chain, its surface marked by time. The path beyond beckons, as if waiting for something‚Äîor someone‚Äîto set it in motion."

usar amuleto para abrir la puerta:
"You hold the amulet up to the chain that secures the door. To your surprise, the amulet begins to glow faintly, and the chain rattles as if stirred by an unseen force. The lock clicks open with an eerie sound, and the door slowly creaks open, revealing the path beyond."




llave cuando la suelta el troll: 
"The monster dropped a large iron key with intricate engravings, worn by time and use. It has a heavy, almost ominous feel to it, as if it holds the power to unlock something important. It clinks softly as it drops to the ground after the troll falls."

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Dificultades

Como hace tiempo que no dise√±o un c√≥digo estructurado por clases, me ha costado un poco saber por d√≥nde y c√≥mo empezar.

He priorizado la estructura a la eficiencia, y he evitado hacer en Room un vector/lista de Exits, pues a la hora de describir la habitaci√≥n ya tenemos el contains. La lista de exits era util para buscar rapidamente si hay una exit o no en alguna direcci√≥n que el jugador indique.

He tenido dudas sobre c√≥mo se deben implementar las acciones una vez Parseadas (el Go, Look...), al final he llegado a la conclusi√≥n que lo m√°s l√≥gico es que, como todas esas acciones las hace Player, implementar ah√≠ las diferentes funciones, y luego la funci√≥n Update() se encarga de actualizar los contains de
las entidades involucradas.

No le he dado uso al vector de entidades de World. Por falta de tiempo (he sido muy ambicioso con los comandos) no lo he quitado ni he sabido darle un uso. Es decir, durante el proceso me he dado cuenta de eso, pero no he tenido tiempo de arreglarlo.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

IDEAS DE GAMEPLAY

Que el monstruo se pasee por Cellar - Gallery - Studio, pero entonces es todo como muy vac√≠o.

la descripcion de los items, como la hacemos? rollo, si la lampara esta en la cocina tiene sentido q diga "hay una lampara en un mueble" noseq, pero si la dropeamos? que dira? --> vale, hay como una peque√±a descripcion rollo "there's a lamp here".

podemos cambiar Name a un vector de Names, por si hay sinonimos (Bookshelf, shelve...)

Me he dado cuenta muy tarde de que he planteado mal lo de los objetos bloqueando salidas. No me da tiempo a arreglarlo asi que lo voy a tener que hacer un poco desestructurado. Creo que he sido demasiado optimista en cuanto a a√±adir contenido en el juego, me han faltado unos 2/3 d√≠as para
implementar correctamente todo lo que hab√≠a pensado desde un principio.

Por otra parte, soy consciente de que tendr√≠a que haber hecho los atributos privados, y funciones p√∫blicas Get() y Set(), pero por pura comodidad lo hab√≠a dejado as√≠ y, claro, no me ha dado tiempo tampoco :)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

TIPOS DE OBJETOS SEGUN COMANDOS

Get/take/grab, throw, drop, read (first take), put x in container (no tengo que tener container en el inventario), turn on/off, attack X with item (en el inventario), break X with item (en el inventario, X no), smell
open
move (no se puede coger)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

üìù 1 PALABRA
north (n), south (s), east (e), west (w)

look (l)

inventory (i)

restart

üìù 2 PALABRAS
go (direction)

get (item), take (item)

drop (item)

open (container/exit)

read (item)

move (object)

üìù 3 PALABRAS
get all, take all

put (item) in (container)

turn on (item), turn off (item)

kill (creature) with (item)
